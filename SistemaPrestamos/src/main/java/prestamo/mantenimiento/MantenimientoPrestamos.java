/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package prestamo.mantenimiento;

import javax.swing.*;
import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.Standard14Fonts;

//import com.itextpdf.*;
/**
 *
 * @author erikr
 */
public class MantenimientoPrestamos extends javax.swing.JFrame {

    /**
     * Creates new form MantenimientoPrestamos
     */
    public MantenimientoPrestamos() {
        initComponents();
        setFechaInicioActual();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtIDPrestamo = new javax.swing.JTextField();
        txtIDCliente = new javax.swing.JTextField();
        txtIDFiador = new javax.swing.JTextField();
        txtFechaInicio = new javax.swing.JTextField();
        txtFechaFinal = new javax.swing.JTextField();
        txtTipoGarantia = new javax.swing.JTextField();
        txtMontoPrestamo = new javax.swing.JTextField();
        txtBalancePrestamo = new javax.swing.JTextField();
        txtTasaPrestamo = new javax.swing.JTextField();
        txtTasaFija = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        txtPlazoPrestamo = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        txtNombreFiador = new javax.swing.JTextField();
        txtNombreCliente1 = new javax.swing.JTextField();
        txtTipoGarantia1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Mantenimiento Prestamos");

        jLabel2.setText("ID PRESTAMO");

        jLabel3.setText("ID CLIENTE");

        jLabel4.setText("ID FIADOR");

        jLabel5.setText("ESTADO PRESTAMO");

        jLabel6.setText("FECHA INICIO");

        jLabel7.setText("PLAZO PRESTAMO");

        jLabel8.setText("FECHA FINAL");

        jLabel9.setText("TIPO DE GARANTIA");

        jLabel10.setText("MONTO DEL PRESTAMO");

        jLabel11.setText("BALANCE DEL PRESTAMO");

        jLabel12.setText("TASA DEL PRESTAMO");

        jLabel13.setText("CUOTA FIJA");

        jButton1.setText("REGISTRAR");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtIDPrestamo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDPrestamoActionPerformed(evt);
            }
        });

        txtIDCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDClienteActionPerformed(evt);
            }
        });

        txtIDFiador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDFiadorActionPerformed(evt);
            }
        });

        txtFechaInicio.setEditable(false);

        txtFechaFinal.setEditable(false);

        txtTipoGarantia.setEditable(false);
        txtTipoGarantia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTipoGarantiaActionPerformed(evt);
            }
        });

        txtMontoPrestamo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMontoPrestamoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMontoPrestamoKeyReleased(evt);
            }
        });

        txtBalancePrestamo.setEditable(false);

        txtTasaPrestamo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTasaPrestamoActionPerformed(evt);
            }
        });
        txtTasaPrestamo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTasaPrestamoKeyReleased(evt);
            }
        });

        txtTasaFija.setEditable(false);

        jButton2.setText("LIMPIAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Activo");

        jLabel14.setText("Meses");

        txtPlazoPrestamo.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        txtPlazoPrestamo.setEditor(new javax.swing.JSpinner.NumberEditor(txtPlazoPrestamo, ""));
        txtPlazoPrestamo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                txtPlazoPrestamoStateChanged(evt);
            }
        });

        jLabel15.setText("%");

        txtNombreFiador.setEditable(false);

        txtNombreCliente1.setEditable(false);

        txtTipoGarantia1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTipoGarantia1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFechaInicio))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(81, 81, 81)
                        .addComponent(txtTasaFija))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBalancePrestamo)
                            .addComponent(txtFechaFinal, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtMontoPrestamo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtTasaPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel15))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtPlazoPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtTipoGarantia1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTipoGarantia))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtIDFiador, javax.swing.GroupLayout.PREFERRED_SIZE, 45, Short.MAX_VALUE)
                                    .addComponent(txtIDCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNombreFiador)
                                    .addComponent(txtNombreCliente1, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addComponent(txtIDPrestamo))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 187, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(176, 176, 176))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtIDPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtIDCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombreCliente1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtIDFiador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombreFiador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel14)
                    .addComponent(txtPlazoPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTipoGarantia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTipoGarantia1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtMontoPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtBalancePrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtTasaPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtTasaFija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialComponents() {
        txtPlazoPrestamo = new javax.swing.JSpinner(new javax.swing.SpinnerNumberModel(1, 1, Integer.MAX_VALUE, 1));

        // Configurar el editor para que el campo de texto no sea editable
        JSpinner.NumberEditor editor = (JSpinner.NumberEditor) txtPlazoPrestamo.getEditor();
        JFormattedTextField textField = editor.getTextField();
        textField.setEditable(false);

        // Agregar el JSpinner al formulario
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.FlowLayout());
        getContentPane().add(txtPlazoPrestamo);

        pack();
    }

    private void txtIDPrestamoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDPrestamoActionPerformed
        // Obtener el ID del préstamo desde el campo de texto
        // Obtener el ID del préstamo desde el campo de texto
        String idPrestamo = txtIDPrestamo.getText().trim();
        boolean existePrestamo = false; // Variable para verificar existencia de préstamo

        // Verificar si el préstamo existe
        try (BufferedReader reader = new BufferedReader(new FileReader("Prestamos.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] atributos = line.split(",");
                if (atributos.length >= 12 && atributos[0].trim().equals(idPrestamo)) { // Verifica el ID del préstamo
                    existePrestamo = true;

                    // Verificar si el estado del préstamo es false
                    if (atributos[3].trim().equals("false")) {
                        // Mostrar mensaje de modificación y cargar atributos
                        JOptionPane.showMessageDialog(this, "Modificando el préstamo con ID: " + idPrestamo);

                        // Cargar los atributos en los campos de la ventana
                        txtIDCliente.setText(atributos[1].trim()); // ID Cliente
                        txtIDFiador.setText(atributos[2].trim());  // ID Fiador
                        txtFechaInicio.setText(atributos[4].trim()); // Fecha de Inicio
                        txtPlazoPrestamo.setValue(Integer.parseInt(atributos[5].trim())); // Plazo
                        txtFechaFinal.setText(atributos[6].trim()); // Fecha Final
                        String tipoGarantia = atributos[7].trim(); // Tipo de Garantía
                        txtMontoPrestamo.setText(atributos[8].trim()); // Monto
                        txtBalancePrestamo.setText(atributos[9].trim()); // Balance
                        txtTasaPrestamo.setText(atributos[10].trim()); // Tasa
                        txtTasaFija.setText(atributos[11].trim()); // Tasa Fija

                        // Buscar y mostrar el nombre del cliente
                        String idCliente = atributos[1].trim();
                        String nombreCliente = null;
                        try (BufferedReader br = new BufferedReader(new FileReader("clientes.txt"))) {
                            String clienteLine;
                            while ((clienteLine = br.readLine()) != null) {
                                String[] clienteParts = clienteLine.split(",");
                                if (clienteParts.length >= 4 && clienteParts[0].trim().equals(idCliente)) {
                                    // Concatenar nombre y apellidos con espacios
                                    nombreCliente = clienteParts[1].trim() + " " + clienteParts[2].trim() + " " + clienteParts[3].trim();
                                    break;
                                }
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                        if (nombreCliente != null) {
                            txtNombreCliente1.setText(nombreCliente);
                        } else {
                            txtNombreCliente1.setText("Cliente no encontrado");
                        }

                        // Buscar y mostrar el nombre del fiador
                        String idFiador = atributos[2].trim();
                        String nombreFiador = null;
                        try (BufferedReader br = new BufferedReader(new FileReader("fiadores.txt"))) {
                            String fiadorLine;
                            while ((fiadorLine = br.readLine()) != null) {
                                String[] fiadorParts = fiadorLine.split(";");
                                if (fiadorParts.length >= 4 && fiadorParts[0].trim().equals(idFiador)) {
                                    // Concatenar nombre y apellidos con espacios
                                    nombreFiador = fiadorParts[1].trim() + " " + fiadorParts[2].trim() + " " + fiadorParts[3].trim();
                                    break;
                                }
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                        if (nombreFiador != null) {
                            txtNombreFiador.setText(nombreFiador);
                        } else {
                            txtNombreFiador.setText("Fiador no encontrado");
                        }

                        // Buscar y mostrar el ID de la garantía
                        String idTipoGarantia = tipoGarantia;
                        String nombreTipoGarantia = null;
                        try (BufferedReader br = new BufferedReader(new FileReader("garantias.txt"))) {
                            String garantiaLine;
                            while ((garantiaLine = br.readLine()) != null) {
                                String[] garantiaParts = garantiaLine.split(";");
                                if (garantiaParts.length >= 2 && garantiaParts[1].trim().equals(tipoGarantia)) {
                                    idTipoGarantia = garantiaParts[0].trim();
                                    nombreTipoGarantia = garantiaParts[1].trim();
                                    break;
                                }
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                        if (nombreTipoGarantia != null) {
                            txtTipoGarantia1.setText(idTipoGarantia); // Mostrar ID de la garantía
                            txtTipoGarantia.setText(nombreTipoGarantia);
                        } else {
                            txtTipoGarantia1.setText("Garantía no encontrada");
                        }

                    } else {
                        // Mensaje si el préstamo no se puede modificar
                        JOptionPane.showMessageDialog(this,
                                "El préstamo con ID '" + idPrestamo + "' está activo y no se puede modificar.",
                                "Error de Modificación",
                                JOptionPane.ERROR_MESSAGE);
                    }

                    break;
                }
            }

            // Si no se encontró el préstamo
            if (!existePrestamo) {
                JOptionPane.showMessageDialog(this,
                        "El préstamo con ID '" + idPrestamo + "' no existe. Puede crear un nuevo préstamo.",
                        "Creación de Préstamo",
                        JOptionPane.INFORMATION_MESSAGE);
                // Aquí puedes habilitar los campos para permitir la digitación de nuevos atributos
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                    "Error al leer el archivo de préstamos. Verifique el archivo 'Prestamos.txt'.",
                    "Error de Archivo",
                    JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_txtIDPrestamoActionPerformed

    private void txtIDClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDClienteActionPerformed
        // TODO add your handling code here:
        String idCliente = txtIDCliente.getText().trim();
        if (idCliente.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "El campo ID Cliente no puede estar vacío.",
                    "Campo Vacío",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        String nombreCliente = null;
        try (BufferedReader br = new BufferedReader(new FileReader("clientes.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(","); // Ajusta el delimitador según tu archivo
                if (parts.length >= 4 && parts[0].trim().equals(idCliente)) {
                    // Concatenar nombre y apellidos con espacios
                    nombreCliente = parts[1].trim() + " " + parts[2].trim() + " " + parts[3].trim();
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (nombreCliente == null) {
            JOptionPane.showMessageDialog(null,
                    "El ID Cliente '" + idCliente + "' no existe.",
                    "Error de Validación",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null,
                    "El ID Cliente '" + idCliente + "' corresponde al cliente: " + nombreCliente,
                    "Cliente Encontrado",
                    JOptionPane.INFORMATION_MESSAGE);
            txtNombreCliente1.setText(nombreCliente);
        }

    }//GEN-LAST:event_txtIDClienteActionPerformed

    private void txtPlazoPrestamoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_txtPlazoPrestamoStateChanged
        // TODO add your handling code here:
        calcularFechaFinal();
    }//GEN-LAST:event_txtPlazoPrestamoStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Verificar la validez de los campos antes de proceder
        if (validarCampos()) {
            // Recopilar datos del préstamo
            String idPrestamo = txtIDPrestamo.getText().trim();
            String idCliente = txtIDCliente.getText().trim();
            String idFiador = txtIDFiador.getText().trim();
            String estadoPrestamo = jCheckBox1.isSelected() ? "true" : "false";
            String fechaInicio = txtFechaInicio.getText().trim();
            String plazoPrestamo = txtPlazoPrestamo.getValue().toString();
            String fechaFinal = txtFechaFinal.getText().trim();
            String tipoGarantia = txtTipoGarantia.getText().trim();
            String montoPrestamo = txtMontoPrestamo.getText().trim();
            String balancePrestamo = txtBalancePrestamo.getText().trim();
            String tasaPrestamo = txtTasaPrestamo.getText().trim();
            String tasaFija = txtTasaFija.getText().trim();

            File archivoPrestamo = new File("Prestamos.txt");
            List<String> lineasPrestamo = new ArrayList<>();
            boolean existePrestamo = false;

            // Leer el archivo de préstamos y modificar o agregar el préstamo
            try (BufferedReader reader = new BufferedReader(new FileReader(archivoPrestamo))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] atributos = line.split(",");
                    if (atributos.length >= 4 && atributos[0].equals(idPrestamo)) {
                        // Actualizar la línea existente con la nueva información
                        String nuevaLinea = idPrestamo + "," + idCliente + "," + idFiador + "," + estadoPrestamo + ","
                                + fechaInicio + "," + plazoPrestamo + "," + fechaFinal + "," + tipoGarantia + ","
                                + montoPrestamo + "," + balancePrestamo + "," + tasaPrestamo + "," + tasaFija;
                        lineasPrestamo.add(nuevaLinea);
                        existePrestamo = true;
                    } else {
                        // Almacenar las líneas no modificadas
                        lineasPrestamo.add(line);
                    }
                }

                // Si el préstamo no existía, agregarlo a la lista
                if (!existePrestamo) {
                    String nuevaLinea = idPrestamo + "," + idCliente + "," + idFiador + "," + estadoPrestamo + ","
                            + fechaInicio + "," + plazoPrestamo + "," + fechaFinal + "," + tipoGarantia + ","
                            + montoPrestamo + "," + balancePrestamo + "," + tasaPrestamo + "," + tasaFija;
                    lineasPrestamo.add(nuevaLinea);
                }

                // Escribir todas las líneas de vuelta en el archivo de préstamos
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(archivoPrestamo))) {
                    for (String linea : lineasPrestamo) {
                        writer.write(linea);
                        writer.newLine();
                    }
                }

                JOptionPane.showMessageDialog(this, "Préstamo guardado exitosamente.");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar el préstamo.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Salir del método en caso de error
            }

            // Buscar y mostrar el nombre de la garantía
            String nombreTipoGarantia = null;
            try (BufferedReader br = new BufferedReader(new FileReader("garantias.txt"))) {
                String garantiaLine;
                while ((garantiaLine = br.readLine()) != null) {
                    String[] garantiaParts = garantiaLine.split(";");
                    if (garantiaParts.length >= 2 && garantiaParts[0].trim().equals(tipoGarantia)) {
                        nombreTipoGarantia = garantiaParts[1].trim();
                        break;
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo de garantías.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            if (nombreTipoGarantia != null) {
                txtTipoGarantia.setText(nombreTipoGarantia); // Mostrar nombre de la garantía
                txtTipoGarantia1.setText(tipoGarantia); // Mostrar ID de la garantía
            } else {
                txtTipoGarantia.setText("Garantía no encontrada");
                txtTipoGarantia1.setText("ID no encontrado");
            }

            // Crear cuotas del préstamo y almacenarlas en el archivo Cuota_Prestamo.txt
            try {
                File archivoCuotas = new File("Cuota_Prestamo.txt");
                List<String> lineasCuota = new ArrayList<>();
                boolean existeCuotas = false;

                // Leer el archivo de cuotas y verificar si ya existen cuotas para este préstamo
                try (BufferedReader reader = new BufferedReader(new FileReader(archivoCuotas))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] atributos = line.split(",");
                        if (atributos.length >= 3 && atributos[0].equals(idPrestamo)) {
                            // Si ya existe una cuota para este préstamo, mantén el contenido
                            existeCuotas = true;
                        }
                        // Almacenar todas las líneas existentes en la lista
                        lineasCuota.add(line);
                    }
                }

                // Solo agregar nuevas cuotas si no existen para este préstamo
                if (!existeCuotas) {
                    int numCuotas = Integer.parseInt(plazoPrestamo);
                    double monto = Double.parseDouble(montoPrestamo);
                    double tasaAnual = Double.parseDouble(tasaPrestamo);

                    // Convertir la tasa anual a mensual
                    double tasaMensual = tasaAnual / 12 / 100;

                    // Verificar si la tasa mensual es cero (no se puede calcular la cuota en este caso)
                    if (tasaMensual == 0) {
                        JOptionPane.showMessageDialog(this, "La tasa de interés mensual no puede ser cero.", "Error", JOptionPane.ERROR_MESSAGE);
                        return; // Salir del método en caso de error
                    }

                    // Calcular la cuota fija mensual
                    double cuotaFija = (monto * tasaMensual) / (1 - Math.pow(1 + tasaMensual, -numCuotas));

                    // Inicializar saldo pendiente
                    double saldoPendiente = monto;
                    double valorInteresCuota;
                    double valorAmortizacionCuota;

                    // Formato para fechas
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                    Date fechaInicioDate = null;

                    try {
                        fechaInicioDate = sdf.parse(fechaInicio);
                    } catch (ParseException e) {
                        JOptionPane.showMessageDialog(this, "Error en el formato de la fecha de inicio.", "Error", JOptionPane.ERROR_MESSAGE);
                        return; // Salir del método en caso de error
                    }

                    // Imprimir encabezado
                    System.out.println("ID_Prestamo | ID_Cliente | Fecha_Cuota | Numero_Cuota | Valor_Cuota | Valor_Amortizacion_Cuota | Valor_Interes_Cuota | Status_Cuota");

                    // Calcular y almacenar los detalles para cada mes
                    for (int mes = 1; mes <= numCuotas; mes++) {
                        valorInteresCuota = saldoPendiente * tasaMensual;
                        valorAmortizacionCuota = cuotaFija - valorInteresCuota;
                        saldoPendiente -= valorAmortizacionCuota;

                        // Calcular la fecha de vencimiento de la cuota
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(fechaInicioDate);
                        calendar.add(Calendar.MONTH, mes);
                        Date fechaCuotaDate = calendar.getTime();
                        String fechaCuota = sdf.format(fechaCuotaDate);

                        // Usar "false" para el estado de la cuota
                        String status = "false";

                        // Mostrar los detalles de la cuota en consola
                        System.out.printf("%s | %s | %s | %d | %.2f | %.2f | %.2f | %s%n",
                                idPrestamo, idCliente, fechaCuota, mes, cuotaFija, valorAmortizacionCuota, valorInteresCuota, status);

                        // Agregar la línea de cuota a la lista
                        String lineaCuota = String.format("%s,%s,%s,%d,%.2f,%.2f,%.2f,%s",
                                idPrestamo, idCliente, fechaCuota, mes, cuotaFija, valorAmortizacionCuota, valorInteresCuota, status);
                        lineasCuota.add(lineaCuota);
                    }
                }

                // Escribir todas las cuotas en el archivo de cuotas
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(archivoCuotas))) {
                    for (String linea : lineasCuota) {
                        writer.write(linea);
                        writer.newLine();
                    }
                }

                JOptionPane.showMessageDialog(this, "Cuotas generadas y guardadas exitosamente.");

                // Crear el PDF con las cuotas del préstamo
                createPDF(idPrestamo);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error en los datos del préstamo. Asegúrese de ingresar valores válidos.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al generar las cuotas del préstamo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos obligatorios y asegúrese de que los valores sean válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void createPDF(String idPrestamo) {
        PDDocument document = new PDDocument();
        try {
            // Crear una nueva página
            PDPage page = new PDPage();
            document.addPage(page);

            // Crear flujo de contenido para la página
            PDPageContentStream contentStream = new PDPageContentStream(document, page);

            // Título del documento
            contentStream.beginText();
            contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.COURIER), 12);
            contentStream.newLineAtOffset(220, 750);
            contentStream.showText("Detalle de Cuotas del Préstamo ID: " + idPrestamo);
            contentStream.endText();

            // Posición inicial para la tabla
            float margin = 50;
            float yPosition = 700;
            float tableWidth = page.getMediaBox().getWidth() - 2 * margin;
            float tableHeight = 20f;
            float rowHeight = 20f;
            float cellMargin = 5f;

            // Definir encabezados de la tabla
            String[] headers = {"ID Préstamo", "ID Cliente", "Fecha Cuota", "Número Cuota", "Valor Cuota", "Amortización", "Interés"};

            // Dibujar encabezados
            contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.COURIER), 8);
            float headerXPosition = margin;
            for (String header : headers) {
                contentStream.beginText();
                contentStream.newLineAtOffset(headerXPosition + cellMargin, yPosition + cellMargin);
                contentStream.showText(header);
                contentStream.endText();
                headerXPosition += tableWidth / headers.length;
            }
            yPosition -= rowHeight;

            // Leer cuotas del archivo y agregarlas a la tabla
            try (BufferedReader reader = new BufferedReader(new FileReader("Cuota_Prestamo.txt"))) {
                String line;
                contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.COURIER), 8);
                while ((line = reader.readLine()) != null) {
                    String[] datos = line.split(",");
                    if (datos.length >= 8 && datos[0].equals(idPrestamo)) {
                        float cellXPosition = margin;
                        for (int i = 0; i < headers.length; i++) {
                            contentStream.beginText();
                            contentStream.newLineAtOffset(cellXPosition + cellMargin, yPosition + cellMargin);
                            contentStream.showText(datos[i]);
                            contentStream.endText();
                            cellXPosition += tableWidth / headers.length;
                        }
                        yPosition -= rowHeight;

                        // Verificar si se necesita una nueva página
                        if (yPosition < margin) {
                            contentStream.close();
                            page = new PDPage();
                            document.addPage(page);
                            contentStream = new PDPageContentStream(document, page);
                            yPosition = 700;
                        }
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo de cuotas.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            // Cerrar el flujo de contenido
            contentStream.close();

            // Guardar el documento
            String fileName = "CUOTA_PRESTAMO_" + idPrestamo + ".pdf";
            document.save(fileName);
            JOptionPane.showMessageDialog(this, "PDF generado exitosamente: " + fileName);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al crear el PDF.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                document.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private String calcularFechaCuota(String fechaInicio, int cuotaNumero) throws ParseException {
        // Definir el formato de la fecha
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        // Convertir la fecha de inicio a un objeto Date
        Date fechaInicioDate = sdf.parse(fechaInicio);

        // Crear un objeto Calendar y establecer la fecha de inicio
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(fechaInicioDate);

        // Añadir el número de meses correspondiente al número de cuota
        calendar.add(Calendar.MONTH, cuotaNumero);

        // Formatear la fecha calculada al formato String
        return sdf.format(calendar.getTime());
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // Limpiar todos los campos de texto

        txtIDPrestamo.setText("");
        txtIDCliente.setText("");
        txtIDFiador.setText("");
        txtFechaInicio.setText("");
        txtFechaFinal.setText("");
        txtTipoGarantia.setText("");
        txtMontoPrestamo.setText("");
        txtBalancePrestamo.setText("");
        txtTasaPrestamo.setText("");
        txtTasaFija.setText("");

        // Restablecer el JSpinner a su valor por defecto (por ejemplo, 1 mes)
        txtPlazoPrestamo.setValue(1);

        // Desmarcar el JCheckBox
        jCheckBox1.setSelected(false);
        setFechaInicioActual();

        // Opcional: Si quieres restablecer también el estado de los botones, puedes hacerlo aquí
        // jButton1.setEnabled(true); // Si quieres habilitar el botón "Registrar" de nuevo
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtIDFiadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDFiadorActionPerformed
        // TODO add your handling code here:
        String idFiador = txtIDFiador.getText().trim();
        if (idFiador.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "El campo ID Fiador no puede estar vacío.",
                    "Campo Vacío",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        String nombreFiador = null;
        try (BufferedReader br = new BufferedReader(new FileReader("fiadores.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(";"); // Ajusta el delimitador según tu archivo
                if (parts.length >= 4 && parts[0].trim().equals(idFiador)) {
                    // Concatenar nombre y apellidos con espacios
                    nombreFiador = parts[1].trim() + " " + parts[2].trim() + " " + parts[3].trim();
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (nombreFiador == null) {
            JOptionPane.showMessageDialog(null,
                    "El ID Fiador '" + idFiador + "' no existe.",
                    "Error de Validación",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null,
                    "El ID Fiador '" + idFiador + "' corresponde al fiador: " + nombreFiador,
                    "Fiador Encontrado",
                    JOptionPane.INFORMATION_MESSAGE);
            txtNombreFiador.setText(nombreFiador);
        }
    }//GEN-LAST:event_txtIDFiadorActionPerformed

    private void txtTipoGarantiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTipoGarantiaActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtTipoGarantiaActionPerformed

    private void txtMontoPrestamoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMontoPrestamoKeyPressed
        // TODO add your handling code here:
        // txtBalancePrestamo.setText(txtMontoPrestamo.getText());
    }//GEN-LAST:event_txtMontoPrestamoKeyPressed

    private void txtMontoPrestamoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMontoPrestamoKeyReleased
        // TODO add your handling code here:
        txtBalancePrestamo.setText(txtMontoPrestamo.getText());
    }//GEN-LAST:event_txtMontoPrestamoKeyReleased

    private void txtTasaPrestamoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTasaPrestamoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTasaPrestamoActionPerformed

    private void txtTasaPrestamoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTasaPrestamoKeyReleased
        // TODO add your handling code here:
        calcularCuotaFija();


    }//GEN-LAST:event_txtTasaPrestamoKeyReleased

    private void txtTipoGarantia1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTipoGarantia1ActionPerformed
        // TODO add your handling code here:
        // Obtener el tipo de garantía desde el campo de texto (se espera que sea el ID)
        String tipoGarantiaID = txtTipoGarantia1.getText().trim();

        // Verificar si el campo está vacío
        if (tipoGarantiaID.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "El campo Tipo Garantía no puede estar vacío.",
                    "Campo Vacío",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Variables para almacenar los datos encontrados
        String nombreTipoGarantia = null;

        // Leer el archivo de garantías
        try (BufferedReader br = new BufferedReader(new FileReader("garantias.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(";"); // Usar el delimitador ';'
                if (parts.length > 1 && parts[0].trim().equals(tipoGarantiaID)) {
                    // Encontrar el nombre del tipo de garantía
                    nombreTipoGarantia = parts[1].trim();
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Verificar si se encontró el tipo de garantía
        if (nombreTipoGarantia == null) {
            JOptionPane.showMessageDialog(null,
                    "El ID Tipo Garantía '" + tipoGarantiaID + "' no existe.",
                    "Error de Validación",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null,
                    "El ID Tipo Garantía '" + tipoGarantiaID + "' corresponde a: " + nombreTipoGarantia,
                    "Tipo Garantía Encontrado",
                    JOptionPane.INFORMATION_MESSAGE);
            txtTipoGarantia.setText("");

            // Actualizar el campo de texto con el nombre del tipo de garantía
            txtTipoGarantia.setText(nombreTipoGarantia);
        }

    }//GEN-LAST:event_txtTipoGarantia1ActionPerformed

    private void calcularCuotaFija() {
        try {
            // Obtener los valores de la interfaz gráfica
            double montoPrestamo = Double.parseDouble(txtMontoPrestamo.getText());
            double tasaAnual = Double.parseDouble(txtTasaPrestamo.getText()) / 100; // Convertir a porcentaje
            int meses = (Integer) txtPlazoPrestamo.getValue();

            // Convertir la tasa anual a tasa mensual
            double tasaMensual = tasaAnual / 12;

            // Verificar si la tasa mensual es cero
            if (tasaMensual == 0) {
                JOptionPane.showMessageDialog(this, "La tasa de interés mensual no puede ser cero.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Salir del método en caso de error
            }

            // Calcular la cuota fija mensual utilizando la fórmula de amortización
            double cuotaFija = (montoPrestamo * tasaMensual) / (1 - Math.pow(1 + tasaMensual, -meses));

            // Inicializar saldo pendiente
            double saldoPendiente = montoPrestamo;
            double valorInteresCuota;
            double valorAmortizacionCuota;

            // Imprimir encabezado de la tabla
            System.out.println("Mes\tValor_Cuota\tValor_Amortizacion_Cuota\tValor_Interes_Cuota");

            // Calcular y mostrar los detalles para cada mes
            for (int mes = 1; mes <= meses; mes++) {
                valorInteresCuota = saldoPendiente * tasaMensual; // Interés de la cuota
                valorAmortizacionCuota = cuotaFija - valorInteresCuota; // Parte de la cuota que amortiza el capital
                saldoPendiente -= valorAmortizacionCuota; // Actualizar saldo pendiente

                // Mostrar los detalles de la cuota en la consola
                System.out.printf("%d\t%.2f\t%.2f\t%.2f%n", mes, cuotaFija, valorAmortizacionCuota, valorInteresCuota);

                // Determinar el estado de la cuota (este valor no se usa actualmente, pero se podría implementar)
                String status = (saldoPendiente <= 0) ? "Pagada" : "Pendiente";
            }

            // Mostrar la cuota fija calculada en la interfaz gráfica
            txtTasaFija.setText(String.format("%.2f", cuotaFija));

        } catch (NumberFormatException e) {
            // Manejar errores en la entrada de datos
            JOptionPane.showMessageDialog(this, "Por favor ingrese valores válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void setFechaInicioActual() {
        // Obtener la fecha actual del sistema
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String fechaActual = dateFormat.format(new Date());
        System.out.println("Fecha actual del sistema: " + fechaActual);

        // Establecer la fecha en el campo de texto
        txtFechaInicio.setText(fechaActual);
    }

    private void calcularFechaFinal() {
        // Obtener la fecha de inicio del préstamo
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaInicio = null;
        try {
            fechaInicio = dateFormat.parse(txtFechaInicio.getText());
        } catch (ParseException e) {
            e.printStackTrace();
            return;
        }

        // Obtener el plazo del préstamo desde el JSpinner
        int plazoMeses = (Integer) txtPlazoPrestamo.getValue(); // Asumiendo que tu JSpinner se llama spinnerPlazoPrestamo

        // Calcular la fecha final
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(fechaInicio);
        calendar.add(Calendar.MONTH, plazoMeses);

        // Formatear la fecha final
        String fechaFinal = dateFormat.format(calendar.getTime());

        // Establecer la fecha final en el campo de texto
        txtFechaFinal.setText(fechaFinal);

        // Imprimir la fecha final para verificar
        System.out.println("Fecha final calculada: " + fechaFinal);
    }

    private boolean validarCampos() {
        // Verificar que los campos obligatorios no estén vacíos
        boolean camposLlenos = !txtIDPrestamo.getText().trim().isEmpty()
                && !txtIDCliente.getText().trim().isEmpty()
                && !txtFechaInicio.getText().trim().isEmpty()
                && !txtFechaFinal.getText().trim().isEmpty()
                && !txtTipoGarantia.getText().trim().isEmpty()
                && !txtMontoPrestamo.getText().trim().isEmpty()
                && !txtBalancePrestamo.getText().trim().isEmpty()
                && !txtTasaPrestamo.getText().trim().isEmpty()
                && !txtTasaFija.getText().trim().isEmpty();

        if (!camposLlenos) {
            return false;
        }

        // Validar que el plazo del préstamo sea un número mayor a 0
        int plazoPrestamo = ((Number) txtPlazoPrestamo.getValue()).intValue();
        if (plazoPrestamo <= 0) {
            return false;
        }

        // Validar que la tasa fija sea un número mayor a 0
        double tasaFija;
        try {
            tasaFija = Double.parseDouble(txtTasaFija.getText().trim());
            if (tasaFija <= 0) {
                return false;
            }
        } catch (NumberFormatException e) {
            return false;
        }

        // Validar que el monto del préstamo sea un número positivo
        double montoPrestamo;
        try {
            montoPrestamo = Double.parseDouble(txtMontoPrestamo.getText().trim());
            if (montoPrestamo <= 0) {
                return false;
            }
        } catch (NumberFormatException e) {
            return false;
        }

        // Validar que la fecha final sea posterior a la fecha de inicio
        try {
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            Date fechaInicio = formatoFecha.parse(txtFechaInicio.getText().trim());
            Date fechaFinal = formatoFecha.parse(txtFechaFinal.getText().trim());
            if (fechaFinal.before(fechaInicio)) {
                return false;
            }
        } catch (ParseException e) {
            return false;
        }

        // Validar que el balance del préstamo sea un número positivo
        double balancePrestamo;
        try {
            balancePrestamo = Double.parseDouble(txtBalancePrestamo.getText().trim());
            if (balancePrestamo < 0) {
                return false;
            }
        } catch (NumberFormatException e) {
            return false;
        }

        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenimientoPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenimientoPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenimientoPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenimientoPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MantenimientoPrestamos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtBalancePrestamo;
    private javax.swing.JTextField txtFechaFinal;
    private javax.swing.JTextField txtFechaInicio;
    private javax.swing.JTextField txtIDCliente;
    private javax.swing.JTextField txtIDFiador;
    private javax.swing.JTextField txtIDPrestamo;
    private javax.swing.JTextField txtMontoPrestamo;
    private javax.swing.JTextField txtNombreCliente1;
    private javax.swing.JTextField txtNombreFiador;
    private javax.swing.JSpinner txtPlazoPrestamo;
    private javax.swing.JTextField txtTasaFija;
    private javax.swing.JTextField txtTasaPrestamo;
    private javax.swing.JTextField txtTipoGarantia;
    private javax.swing.JTextField txtTipoGarantia1;
    // End of variables declaration//GEN-END:variables
}
