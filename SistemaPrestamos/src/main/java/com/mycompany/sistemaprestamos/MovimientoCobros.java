/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.sistemaprestamos;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.Standard14Fonts;

/**
 *
 * @author erikr
 */
public class MovimientoCobros extends javax.swing.JFrame {

    private DefaultTableModel tblModel;

    /**
     * Creates new form MovimientoCobros
     */
    public MovimientoCobros() {
        initComponents();
        initTableModel();
        setFechaInicioActual();
    }

    private void initTableModel() {
        tblModel = new DefaultTableModel(
                new Object[][]{},
                new String[]{"ID COBRO", "FECHA", "CUOTA", "VALOR CAPITAL", "VALOR INTERNO", "ESTADO"}
        ) {
            // Sobrescribimos el m√©todo isCellEditable para que todas las celdas no sean editables.
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        jTable1.setModel(tblModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtIdCobro = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtIdCteCobro = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtFechaCobro = new javax.swing.JTextField();
        txtValorCobro = new javax.swing.JTextField();
        btnCobrar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtConceptoCobro = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtNombreCliente = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtIDPrestamo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("MOVIMIENTO DE COBROS");

        jLabel2.setText("ID COBRO");

        txtIdCobro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdCobroActionPerformed(evt);
            }
        });

        jLabel3.setText("ID CLIENTE");

        txtIdCteCobro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdCteCobroActionPerformed(evt);
            }
        });

        jLabel5.setText("VALOR COBRO");

        txtFechaCobro.setEditable(false);

        txtValorCobro.setEditable(false);

        btnCobrar.setText("COBRAR");
        btnCobrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCobrarActionPerformed(evt);
            }
        });

        jLabel6.setText("CUOTAS PENDIENTES");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "# CUOTA", "FECHA", "CUOTA", "VALOR CAPITAL", "VALOR INTERNO", "ESTADO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        jLabel7.setText("CONCEPTO");

        jLabel4.setText("NOMBRE:");

        txtNombreCliente.setEditable(false);

        jLabel8.setText("ID PRESTAMO");

        txtIDPrestamo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDPrestamoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addComponent(jLabel1))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtIdCteCobro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtIdCobro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtIDPrestamo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 33, Short.MAX_VALUE)
                                .addComponent(txtFechaCobro, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNombreCliente)
                                .addGap(30, 30, 30))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(btnCobrar)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpiar))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtConceptoCobro, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtValorCobro, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(337, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFechaCobro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtIdCobro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtIdCteCobro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtIDPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtConceptoCobro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtValorCobro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCobrar)
                    .addComponent(btnLimpiar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtIdCobroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdCobroActionPerformed
        // TODO add your handling code here:
        verificarIdCobro();
    }//GEN-LAST:event_txtIdCobroActionPerformed

    private void btnCobrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCobrarActionPerformed
        // Validar selecci√≥n de fila
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una cuota para cobrar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener datos de la cuota seleccionada
        String cuota = jTable1.getValueAt(selectedRow, 0).toString();
        String fecha = jTable1.getValueAt(selectedRow, 1).toString();
        String monto = jTable1.getValueAt(selectedRow, 2).toString();
        String estado = jTable1.getValueAt(selectedRow, 3).toString();

        String valorCobro = txtValorCobro.getText().trim();
        if (valorCobro.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El valor de cobro no puede estar vac√≠o.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double montoCuota;
        double valor;
        try {
            montoCuota = Double.parseDouble(monto);
            valor = Double.parseDouble(valorCobro);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El valor de cobro debe ser un n√∫mero v√°lido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (valor < montoCuota) {
            JOptionPane.showMessageDialog(this, "El valor de cobro no puede ser menor que el monto de la cuota.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Procesar el cobro
        String idCliente = txtIdCteCobro.getText().trim();
        File archivoCuotas = new File("Cuota_Prestamo.txt");
        File archivoCuotasTemp = new File("Cuota_Prestamo_Temp.txt");
        File archivoCobro = new File("Cobro_Prestamo.txt");

        boolean cobroRealizado = false;

        try (BufferedReader reader = new BufferedReader(new FileReader(archivoCuotas)); BufferedWriter writer = new BufferedWriter(new FileWriter(archivoCuotasTemp))) {

            String line;
            String lineaCobro = null;

            while ((line = reader.readLine()) != null) {
                String[] atributos = line.split(",");
                if (atributos[1].equals(idCliente) && atributos[3].equals(cuota) && atributos[7].equals("false")) {
                    // Marcar la cuota como cobrada
                    atributos[7] = "true";
                    cobroRealizado = true;
                    // Preparar la l√≠nea de cobro para registrar
                    lineaCobro = txtIdCobro.getText().trim() + ","
                            + new SimpleDateFormat("dd/MM/yyyy").format(new Date()) + ","
                            + idCliente + ","
                            + cuota + ","
                            + valorCobro + ","
                            + txtConceptoCobro.getText().trim() + ","
                            + "true";
                }
                // Escribir la l√≠nea actualizada en el archivo temporal
                writer.write(String.join(",", atributos));
                writer.newLine();
            }

            if (cobroRealizado) {
                // Escribir el cobro en el archivo una sola vez si se realiz√≥ el cobro
                try (BufferedWriter cobroWriter = new BufferedWriter(new FileWriter(archivoCobro, true))) {
                    cobroWriter.write(lineaCobro);
                    cobroWriter.newLine();
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo realizar el cobro. Verifique los datos y vuelva a intentarlo.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al procesar el cobro.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        // Reemplazar el archivo original por el archivo temporal
        if (archivoCuotas.delete()) {
            archivoCuotasTemp.renameTo(archivoCuotas);
            JOptionPane.showMessageDialog(this, "Cobro realizado con √©xito.");
        } else {
            JOptionPane.showMessageDialog(this, "Error al actualizar el archivo de cuotas.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Actualizar el balance en Prestamo.txt
        actualizarBalancePrestamo(idCliente, valor);

        // Generar PDF con detalles del cobro
        try {
            generarReciboCobroPDF(txtIdCobro.getText().trim(), new SimpleDateFormat("dd/MM/yyyy").format(new Date()), idCliente, cuota, monto, valorCobro);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al generar el PDF del cobro.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

        // Limpiar campos y actualizar tabla
        limpiarCampos();
        // buscarCuotasPorCliente(); // Aseg√∫rate de implementar este m√©todo si es necesario
    }//GEN-LAST:event_btnCobrarActionPerformed
    private void actualizarBalancePrestamo(String idCliente, double montoCobrado) {
        File archivoPrestamos = new File("prestamos.txt");
        File archivoPrestamosTemp = new File("Prestamo_Temp.txt");

        if (!archivoPrestamos.exists()) {
            JOptionPane.showMessageDialog(this, "El archivo de pr√©stamos no existe.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(archivoPrestamos)); BufferedWriter writer = new BufferedWriter(new FileWriter(archivoPrestamosTemp))) {

            String line;
            boolean actualizado = false;

            while ((line = reader.readLine()) != null) {
                String[] atributos = line.split(",");

                // Validar el formato de la l√≠nea
                if (atributos.length <= 9) {
                    JOptionPane.showMessageDialog(this, "Formato de archivo incorrecto en la l√≠nea: " + line, "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                if (atributos[1].equals(idCliente)) { // Buscar el pr√©stamo correspondiente al cliente
                    try {
                        double balanceActual = Double.parseDouble(atributos[9]); // Suponiendo que el balance est√° en la posici√≥n 9
                        double nuevoBalance = balanceActual - montoCobrado;

                        // Si el nuevo balance es cero, marcar el estado como true
                        if (nuevoBalance <= 0) {
                            atributos[9] = "0"; // Asegurar que el balance sea cero
                            atributos[3] = "false"; // Suponiendo que el estado est√° en la posici√≥n 10
                        } else {
                            atributos[9] = String.valueOf(nuevoBalance);
                        }

                        actualizado = true;
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "Error al parsear el balance: " + atributos[9], "Error", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }
                }

                // Escribir la l√≠nea (actualizada o no) en el archivo temporal
                writer.write(String.join(",", atributos));
                writer.newLine();
            }

            if (!actualizado) {
                JOptionPane.showMessageDialog(this, "No se encontr√≥ el pr√©stamo con ID: " + idCliente, "Advertencia", JOptionPane.WARNING_MESSAGE);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar el balance del pr√©stamo.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

        // Reemplazar el archivo original por el archivo temporal
        if (archivoPrestamos.delete()) {
            if (!archivoPrestamosTemp.renameTo(archivoPrestamos)) {
                JOptionPane.showMessageDialog(this, "Error al reemplazar el archivo de pr√©stamos.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error al eliminar el archivo de pr√©stamos original.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void txtIdCteCobroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdCteCobroActionPerformed
        // TODO add your handling code here:
        buscarCuotasPorCliente();
    }//GEN-LAST:event_txtIdCteCobroActionPerformed

    private void txtIDPrestamoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDPrestamoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDPrestamoActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        // Obt√©n la fila seleccionada
        int filaSeleccionada = jTable1.getSelectedRow();

        // Aseg√∫rate de que hay una fila seleccionada
        if (filaSeleccionada != -1) {
            // Obt√©n el valor de la columna CUOTA en la fila seleccionada
            Object valorCuota = jTable1.getValueAt(filaSeleccionada, 2); // Reemplaza columnaCuotaIndex con el √≠ndice real de la columna CUOTA

            // Si el valor no es nulo, lo asignamos al campo de texto
            if (valorCuota != null) {
                txtValorCobro.setText(valorCuota.toString());
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    private void limpiarCampos() {
        txtIdCobro.setText("");
        txtIdCteCobro.setText("");
        txtFechaCobro.setText("");
        txtValorCobro.setText("");
        txtConceptoCobro.setText("");
        txtNombreCliente.setText("");
        txtIDPrestamo.setText("");

        // Limpiar cualquier selecci√≥n de tabla
        jTable1.clearSelection();

    }

    private void buscarCuotasPorCliente() {
        String idCliente = txtIdCteCobro.getText().trim();
        String idPrestamo = txtIDPrestamo.getText().trim(); // Campo de texto para ID de pr√©stamo
        File archivoCuotas = new File("Cuota_Prestamo.txt");
        File archivoClientes = new File("Clientes.txt"); // Archivo de clientes

        tblModel.setRowCount(0); // Limpiar tabla antes de cargar nuevas cuotas

        if (idCliente.isEmpty() || idPrestamo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El ID del cliente y el ID del pr√©stamo no pueden estar vac√≠os.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Buscar el nombre del cliente y mostrarlo en txtNombreCliente
        try (BufferedReader clienteReader = new BufferedReader(new FileReader(archivoClientes))) {
            String line;
            boolean clienteEncontrado = false;

            while ((line = clienteReader.readLine()) != null) {
                String[] atributosCliente = line.split(",");
                if (atributosCliente[0].trim().equals(idCliente)) { // Verificar que el ID del cliente coincide
                    txtNombreCliente.setText(atributosCliente[1].trim()); // Asignar el nombre del cliente
                    clienteEncontrado = true;
                    break;
                }
            }

            if (!clienteEncontrado) {
                JOptionPane.showMessageDialog(this, "No se encontr√≥ el cliente con ID: " + idCliente, "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo de clientes.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        // Buscar las cuotas del cliente para el pr√©stamo espec√≠fico
        boolean cuotaEncontrada = false;
        try (BufferedReader reader = new BufferedReader(new FileReader(archivoCuotas))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] atributos = line.split(",");

                // Verificar coincidencia exacta del ID de pr√©stamo y del ID de cliente
                if (atributos[1].trim().equals(idCliente) && atributos[0].trim().equals(idPrestamo) && atributos[7].trim().equals("false")) {
                    tblModel.addRow(new Object[]{
                        atributos[3].trim(), // CUOTA
                        atributos[2].trim(), // FECHA
                        atributos[4].trim(), // MONTO
                        atributos[5].trim(), // VALOR CAPITAL
                        atributos[6].trim(), // VALOR INTERES
                        "Pendiente" // ESTADO
                    });
                    cuotaEncontrada = true;
                    System.out.println("Cuota a√±adida a la tabla: " + Arrays.toString(atributos));
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo de cuotas.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        // Si no se encontr√≥ ninguna cuota, mostrar un mensaje
        if (!cuotaEncontrada) {
            JOptionPane.showMessageDialog(this, "No se encontraron cuotas pendientes para el cliente con ID: " + idCliente + " y el pr√©stamo con ID: " + idPrestamo, "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void setFechaInicioActual() {
        // Obtener la fecha actual del sistema
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String fechaActual = dateFormat.format(new Date());
        System.out.println("Fecha actual del sistema: " + fechaActual);

        // Establecer la fecha en el campo de texto
        txtFechaCobro.setText(fechaActual);
    }

    private void verificarIdCobro() {
        String idCobro = txtIdCobro.getText().trim();
        File archivoCobro = new File("Cobro_Prestamo.txt");
        boolean existeCobro = false;

        try (BufferedReader reader = new BufferedReader(new FileReader(archivoCobro))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] atributos = line.split(",");
                if (atributos.length >= 3 && atributos[0].equals(idCobro)) {
                    existeCobro = true;
                    // Aqu√≠ deber√≠as mostrar los detalles del cobro
                    JOptionPane.showMessageDialog(this, "Modificando", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            }
            if (!existeCobro) {
                JOptionPane.showMessageDialog(this, "Creando", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "ERROR", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // M√©todo para generar el PDF del recibo de cobro
    private void generarReciboCobroPDF(String idCobro, String fechaCobro, String idCliente, String cuota, String montoCuota, String valorCobrado) throws IOException {
        PDDocument document = new PDDocument();
        PDPage page = new PDPage();
        document.addPage(page);

        PDPageContentStream contentStream = new PDPageContentStream(document, page);

        // T√≠tulo
        contentStream.beginText();
        contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.COURIER), 12);
        contentStream.newLineAtOffset(220, 750);
        contentStream.showText("Recibo de Cobro");
        contentStream.endText();

        // Informaci√≥n del cobro
        contentStream.beginText();
        contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.COURIER), 8);
        contentStream.newLineAtOffset(50, 700);
        contentStream.showText("ID de Cobro: " + idCobro);
        contentStream.newLineAtOffset(0, -20);
        contentStream.showText("Fecha de Cobro: " + fechaCobro);
        contentStream.newLineAtOffset(0, -20);
        contentStream.showText("ID del Cliente: " + idCliente);
        contentStream.newLineAtOffset(0, -20);
        contentStream.showText("Cuota: " + cuota);
        contentStream.newLineAtOffset(0, -20);
        contentStream.showText("Monto de la Cuota: " + montoCuota);
        contentStream.newLineAtOffset(0, -20);
        contentStream.showText("Monto Cobrado: " + valorCobrado);
        contentStream.endText();

        // Finalizar y guardar el PDF
        contentStream.close();
        document.save("Recibo_Cobro_" + idCobro + ".pdf");
        document.close();
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovimientoCobros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovimientoCobros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovimientoCobros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovimientoCobros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovimientoCobros().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCobrar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtConceptoCobro;
    private javax.swing.JTextField txtFechaCobro;
    private javax.swing.JTextField txtIDPrestamo;
    private javax.swing.JTextField txtIdCobro;
    private javax.swing.JTextField txtIdCteCobro;
    private javax.swing.JTextField txtNombreCliente;
    private javax.swing.JTextField txtValorCobro;
    // End of variables declaration//GEN-END:variables
}
